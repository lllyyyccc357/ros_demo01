// Generated by gencpp from file common/data.msg
// DO NOT EDIT!


#ifndef COMMON_MESSAGE_DATA_H
#define COMMON_MESSAGE_DATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace common
{
template <class ContainerAllocator>
struct data_
{
  typedef data_<ContainerAllocator> Type;

  data_()
    : num(0)
    , name(0)
    , dataX(0.0)
    , dataY(0.0)
    , dataZ(0.0)  {
    }
  data_(const ContainerAllocator& _alloc)
    : num(0)
    , name(0)
    , dataX(0.0)
    , dataY(0.0)
    , dataZ(0.0)  {
  (void)_alloc;
    }



   typedef uint16_t _num_type;
  _num_type num;

   typedef uint16_t _name_type;
  _name_type name;

   typedef double _dataX_type;
  _dataX_type dataX;

   typedef double _dataY_type;
  _dataY_type dataY;

   typedef double _dataZ_type;
  _dataZ_type dataZ;





  typedef boost::shared_ptr< ::common::data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::common::data_<ContainerAllocator> const> ConstPtr;

}; // struct data_

typedef ::common::data_<std::allocator<void> > data;

typedef boost::shared_ptr< ::common::data > dataPtr;
typedef boost::shared_ptr< ::common::data const> dataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::common::data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::common::data_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::common::data_<ContainerAllocator1> & lhs, const ::common::data_<ContainerAllocator2> & rhs)
{
  return lhs.num == rhs.num &&
    lhs.name == rhs.name &&
    lhs.dataX == rhs.dataX &&
    lhs.dataY == rhs.dataY &&
    lhs.dataZ == rhs.dataZ;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::common::data_<ContainerAllocator1> & lhs, const ::common::data_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace common

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::common::data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common::data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common::data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common::data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common::data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common::data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::common::data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e9bb33691428ef10dc0972b1c5accbe4";
  }

  static const char* value(const ::common::data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe9bb33691428ef10ULL;
  static const uint64_t static_value2 = 0xdc0972b1c5accbe4ULL;
};

template<class ContainerAllocator>
struct DataType< ::common::data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "common/data";
  }

  static const char* value(const ::common::data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::common::data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 num\n"
"# 2 IMU num 0,1\n"
"uint16 name\n"
"# gyro 1 acc 2 mag 3\n"
"float64 dataX\n"
"float64 dataY\n"
"float64 dataZ\n"
;
  }

  static const char* value(const ::common::data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::common::data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.num);
      stream.next(m.name);
      stream.next(m.dataX);
      stream.next(m.dataY);
      stream.next(m.dataZ);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::common::data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::common::data_<ContainerAllocator>& v)
  {
    s << indent << "num: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.num);
    s << indent << "name: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.name);
    s << indent << "dataX: ";
    Printer<double>::stream(s, indent + "  ", v.dataX);
    s << indent << "dataY: ";
    Printer<double>::stream(s, indent + "  ", v.dataY);
    s << indent << "dataZ: ";
    Printer<double>::stream(s, indent + "  ", v.dataZ);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMON_MESSAGE_DATA_H
