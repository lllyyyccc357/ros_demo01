// Generated by gencpp from file common/gesture.msg
// DO NOT EDIT!


#ifndef COMMON_MESSAGE_GESTURE_H
#define COMMON_MESSAGE_GESTURE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace common
{
template <class ContainerAllocator>
struct gesture_
{
  typedef gesture_<ContainerAllocator> Type;

  gesture_()
    : IMUnum(0)
    , EulerAngleX(0.0)
    , EulerAngleY(0.0)
    , EulerAngleZ(0.0)  {
    }
  gesture_(const ContainerAllocator& _alloc)
    : IMUnum(0)
    , EulerAngleX(0.0)
    , EulerAngleY(0.0)
    , EulerAngleZ(0.0)  {
  (void)_alloc;
    }



   typedef uint16_t _IMUnum_type;
  _IMUnum_type IMUnum;

   typedef double _EulerAngleX_type;
  _EulerAngleX_type EulerAngleX;

   typedef double _EulerAngleY_type;
  _EulerAngleY_type EulerAngleY;

   typedef double _EulerAngleZ_type;
  _EulerAngleZ_type EulerAngleZ;





  typedef boost::shared_ptr< ::common::gesture_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::common::gesture_<ContainerAllocator> const> ConstPtr;

}; // struct gesture_

typedef ::common::gesture_<std::allocator<void> > gesture;

typedef boost::shared_ptr< ::common::gesture > gesturePtr;
typedef boost::shared_ptr< ::common::gesture const> gestureConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::common::gesture_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::common::gesture_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::common::gesture_<ContainerAllocator1> & lhs, const ::common::gesture_<ContainerAllocator2> & rhs)
{
  return lhs.IMUnum == rhs.IMUnum &&
    lhs.EulerAngleX == rhs.EulerAngleX &&
    lhs.EulerAngleY == rhs.EulerAngleY &&
    lhs.EulerAngleZ == rhs.EulerAngleZ;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::common::gesture_<ContainerAllocator1> & lhs, const ::common::gesture_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace common

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::common::gesture_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common::gesture_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common::gesture_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common::gesture_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common::gesture_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common::gesture_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::common::gesture_<ContainerAllocator> >
{
  static const char* value()
  {
    return "88d3ec4e2cf6db353d34286a6368badd";
  }

  static const char* value(const ::common::gesture_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x88d3ec4e2cf6db35ULL;
  static const uint64_t static_value2 = 0x3d34286a6368baddULL;
};

template<class ContainerAllocator>
struct DataType< ::common::gesture_<ContainerAllocator> >
{
  static const char* value()
  {
    return "common/gesture";
  }

  static const char* value(const ::common::gesture_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::common::gesture_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 IMUnum\n"
"float64 EulerAngleX\n"
"float64 EulerAngleY\n"
"float64 EulerAngleZ\n"
;
  }

  static const char* value(const ::common::gesture_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::common::gesture_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.IMUnum);
      stream.next(m.EulerAngleX);
      stream.next(m.EulerAngleY);
      stream.next(m.EulerAngleZ);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gesture_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::common::gesture_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::common::gesture_<ContainerAllocator>& v)
  {
    s << indent << "IMUnum: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.IMUnum);
    s << indent << "EulerAngleX: ";
    Printer<double>::stream(s, indent + "  ", v.EulerAngleX);
    s << indent << "EulerAngleY: ";
    Printer<double>::stream(s, indent + "  ", v.EulerAngleY);
    s << indent << "EulerAngleZ: ";
    Printer<double>::stream(s, indent + "  ", v.EulerAngleZ);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMON_MESSAGE_GESTURE_H
